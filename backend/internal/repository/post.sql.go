// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    title,
    content,
    files
) VALUES (
 $1, $2, $3
)
RETURNING id, title, content, files, created_at, updated_at
`

type CreatePostParams struct {
	Title   string   `db:"title" json:"title"`
	Content *string  `db:"content" json:"content"`
	Files   []string `db:"files" json:"files"`
}

func (q *Queries) CreatePost(ctx context.Context, arg *CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Content, arg.Files)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Files,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePostById, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, content, files, created_at, updated_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Files,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllPosts = `-- name: ListAllPosts :many
SELECT id, title, files FROM posts
ORDER BY title
`

type ListAllPostsRow struct {
	ID    pgtype.UUID `db:"id" json:"id"`
	Title string      `db:"title" json:"title"`
	Files []string    `db:"files" json:"files"`
}

func (q *Queries) ListAllPosts(ctx context.Context) ([]ListAllPostsRow, error) {
	rows, err := q.db.Query(ctx, listAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllPostsRow
	for rows.Next() {
		var i ListAllPostsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Files); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
set title = $2,
    content = $3,
    files = $4,
    updated_at = $5
WHERE id = $1 RETURNING id, title, content, files, created_at, updated_at
`

type UpdatePostParams struct {
	ID        pgtype.UUID        `db:"id" json:"id"`
	Title     string             `db:"title" json:"title"`
	Content   *string            `db:"content" json:"content"`
	Files     []string           `db:"files" json:"files"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg *UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Files,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Files,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
